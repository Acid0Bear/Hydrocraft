---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Robotex140.
--- DateTime: 12-Mar-22 22:14
---



require "ISUI/GlobalFunctions"
require "ISUI/ISSimpleUI"
require "ISUI/ISSimpleText"
require "ISUI/ISSimpleImage"
require "ISUI/ISSimpleRichText"
require "ISUI/ISSimpleScrollingListBox"
require "ISUI/ISSimpleButton"
require "ISUI/ISSimpleComboBox"
require "ISUI/ISSimpleEmpty"
require "ISUI/ISSimpleEntry"
require "ISUI/ISSimpleImageButton"
require "ISUI/ISSimpleProgressBar"
require "ISUI/ISSimpleTickBox"

local FONT_HGT_SMALL = getTextManager():getFontHeight(UIFont.Small)


----------- Recipes ----------------
local text1 = "<H1> The longest night <BR> <SIZE:small> In this mission, you gonna need to survivre all night. <BR> <LEFT> Reward: <LINE> - M14 <LINE> - 20 ammo <BR> Failure Conditions: <LINE> -Death"
local text2 = "<H1> I need medical supply ! <BR> <SIZE:small> Please someone come to xx to help me ! I need a doctor or I'm gonna die. <BR> <LEFT> Reward: <LINE> - Everything I have"
local text3 = "<H1> Help me clean my neighborhood <BR> <SIZE:small> I need someone to help me fight a group of zombie near xx, there is around xx of them and I don't want to do it alone. <BR> <LEFT> Reward: <LINE> - 100$"
local text4 = "<H1> Looking for seed <BR> <SIZE:small> I'm looking for seed, every type of seed. I can pay or exchange. Contact me on my public frequencies xx.x."
local items = {};
items["Craft wooden Bucket"] = text1;
items["Craft wooden Ladder"] = text2;
items["Help me clean my neighborhood"] = text3;
items["Looking for seed"] = text4;
items["item5"] = "";
items["item6"] = "";
items["item7"] = "";
items["item8"] = "";
items["item9"] = "";
items["item10"] = "";
items["item11"] = "";


local LITERATURE_HIDDEN = {}

local function SetItemHidden(fullType, hidden)
    if type(fullType) ~= 'string' or not string.contains(fullType, '.') then return end
    LITERATURE_HIDDEN[fullType] = hidden and true or nil
end

SetItemHidden('Base.BookBlacksmith1', true)
SetItemHidden('Base.BookBlacksmith2', true)
SetItemHidden('Base.BookBlacksmith3', true)
SetItemHidden('Base.BookBlacksmith4', true)
SetItemHidden('Base.BookBlacksmith5', true)
SetItemHidden('Base.SmithingMag1', true)
SetItemHidden('Base.SmithingMag2', true)
SetItemHidden('Base.SmithingMag3', true)
SetItemHidden('Base.SmithingMag4', true)
SetItemHidden('Hydrocraft.HCBookanarchist', true)
SetItemHidden('Hydrocraft.HCBookanarchisthmtd', true)
SetItemHidden('Hydrocraft.HCBookanarchistammonal', true)
SetItemHidden('Hydrocraft.HCBookanarchistpn02', true)
SetItemHidden()


local function get_books() 
    local skillBooks = {}
    local other = {}
    local allItems = getScriptManager():getAllItems()
    local hidden_icons = {
        ["HCMedicalresearch"] = true,
        ["HCBlueprint"] = true,
        ["HCChemicalresearch"] = true,
        ["HCClaytabletwritten"] = true
    }
    for i=1,allItems:size() do
        local item = allItems:get(i-1)
        if item:getType() == Type.Literature then
            if hidden_icons[item:getIcon()] ~= nil then
                SetItemHidden(item:getFullName(), true)
            end 
            if SkillBook[item:getSkillTrained()] then
                table.insert(skillBooks, item)
            elseif item:getTeachedRecipes() ~= nil then
                
                table.insert(other, item)
            end
        end
    end

    local sortFunc = function(a,b)
        return not string.sort(a:getDisplayName(), b:getDisplayName())
    end
    
    table.sort(skillBooks, sortFunc)
    local list_1 = {}
    for _,item in ipairs(skillBooks) do
        if not LITERATURE_HIDDEN[item:getFullName()] then
            list_1[item:getFullName()] = item
        end
    end
    
    table.sort(other, sortFunc)
    local list_2 = {}
    for _,item in ipairs(other) do
        if not LITERATURE_HIDDEN[item:getFullName()] then
            list_2[item:getFullName()] = item
            --add_item(list_2 ,item:getDisplayName(), item)
        end
    end
    local booklist = {}
    booklist.books = list_1
    booklist.recipebook = list_2
    return booklist
end

local function choose(button, args)
    getPlayer():Say("start craftin");
end

local function openRecipeDesc(_, item)  
    descUI:open();
    descUI:setPositionPixel(BaseUI:getX() + BaseUI:getWidth(), BaseUI:getY());
    descUI["rtext"]:setText(item);
end

local function openRecipeDesc(_, item)
    descUI:open();
    descUI:setPositionPixel(BaseUI:getX() + BaseUI:getWidth(), BaseUI:getY());
    descUI["rtext"]:setText(item:getDisplayName());
end

function doDrawItemBooks(self, y, item, alt)
    item.height = math.max(32, FONT_HGT_SMALL) + 2 * 2;
    if not item.height then item.height = self.itemheight end -- compatibililty
    if y < -self:getYScroll() then return y + item.height; end -- Not draw if out of box
    if y > self:getHeight()-self:getYScroll() then return y + item.height; end -- Not draw if out of box
    print('self.itemheight')
    print(self.itemheight)
    if self.selected == item.index then
        self:drawRect(0, (y), self:getWidth(), item.height-1, 0.3, 0.7, 0.35, 0.15);
    end
    self:drawRectBorder(0, (y), self:getWidth(), item.height, 0.5, self.borderColor.r, self.borderColor.g, self.borderColor.b);
    -- draw icon
    local texture = item.item:getNormalTexture()
    if texture then
        local texWidth = texture:getWidthOrig()
        local texHeight = texture:getHeightOrig()
        local a = 1
        if texWidth <= 32 and texHeight <= 32 then
            self:drawTexture(texture,6+(32-texWidth)/2,y+(item.height-texHeight)/2,a,1,1,1)
        else
            self:drawTextureScaledAspect(texture,6,y+(item.height-texHeight)/2,32,32,a,1,1,1)
        end
    end
    -- draw text
    local itemPadY = self.itemPadY or (item.height - self.fontHgt) / 2
    self:drawText(item.item:getDisplayName(), 15 + 32, (y)+itemPadY, 0.9, 0.9, 0.9, 0.9, self.font);
    y = y + item.height;
    return y;
end

local function makeBaseUI()  
    BaseUI = NewUI();
    BaseUI:setTitle("Basic UI")

    BaseUI:setWidthPercent(0.13);

    BaseUI:addScrollList("booklist", {});
    BaseUI["booklist"]:setOnMouseDownFunction(_, openRecipeDesc)
    BaseUI["booklist"].doDrawItem = doDrawItemBooks;
    BaseUI["booklist"].itemheight = math.max(32, FONT_HGT_SMALL) + 2 * 2;
    BaseUI:saveLayout();
    BaseUI:close();
    BaseUI.furni = nil
    --BaseUI:nextLine();
    descUI = NewUI();
    descUI:setTitle("Recipe");
    descUI:isSubUIOf(BaseUI);
    descUI:setWidthPercent(0.2);

    descUI:addEmpty(_, _, _, 10); -- Margin only for rich text
    descUI:addRichText("rtext", "");
    descUI:setLineHeightPercent(0.2);
    descUI:addEmpty(_, _, _, 10); -- Margin only for rich text
    descUI:nextLine();

    descUI:addButton("b1", "craft", choose);

    descUI:saveLayout();
    descUI:close();
end

local function button1()
    getPlayer():Say("button 1")
end
local function button2()
    getPlayer():Say("button 2")
end

ISHCBaseMenu = {};

ISHCBaseMenu.doFurnitureMenu = function(_player, _context, _worldObjects)

    local player = _player;
    local context = _context;
    local worldobjects = _worldObjects;

    -- test for new beehive in square
    beehive_lua = nil
    local furni
    for i,v in ipairs(worldobjects) do
        print(v:getName())
        if v:getName() == "Carpybench" then
            furni = v
        end
    end

    if furni then
        BaseUI.furni = furni
        local HcMenuOption = context:addOption("craft menu", worldobjects, ISHCBaseMenu.onUseBench, player, furni);
        local HcMenuOption = context:addOption("execute", worldobjects, ISHCBaseMenu.execute, player, furni);
    end
end

ISHCBaseMenu.onUseBench = function(player, furni)
    local books = get_books()
    BaseUI["booklist"]:setItems(books.recipebook)
    BaseUI:open()
end

ISHCBaseMenu.execute = function(player, furni)
    local books = get_books()
    recipe = books.recipebook
    
    for k,v in pairs(books.recipebook) do
        item = v
        print("height")
        print(item.height)
        
        break
    end
end

ISHCBaseMenu.toolTipcheck = function(option)

    local _tooltip = ISToolTip:new()
    _tooltip:initialise()
    _tooltip:setVisible(false)
    option.toolTip = _tooltip

    return _tooltip
end

local function func_Init()
    Events.OnPreFillWorldObjectContextMenu.Add(ISHCBaseMenu.doFurnitureMenu)
end

Events.OnGameStart.Add(func_Init)
Events.OnCreateUI.Add(makeBaseUI)